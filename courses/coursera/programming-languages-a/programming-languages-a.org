* Syntax and Semantics
** Syntax is how you write something
** Semantics is what that something means
*** Type-checking (before program runs)
*** Evaluation (as program runs)
** For variable bindings
*** Type-check expression and extend static environment
*** Evaluate expression and extend dynamic environment
* Intro to ML
** Learning a Language involves Five Things
*** Syntax: How do you write language constructs?
*** Semantics: What do programs mean? (Evaluation rules)
*** Idioms: What are typical patterns to express your computation?
*** Libraries: What facilities does the language provide standard?
*** Tools: What is provided to make your job easier? (REPL, debugger, code formmatter, etc)
*** We will focus on semantics and idioms
**** Syntax is useful but mostly uninteresting
**** Libraries and tools are crucial, but often learned "on the job"
**** Without libraries and tools, our languages may look /silly/.
** Benefits of No Mutation
*** We can use aliases to existing data easily because of immutability
*** In languages with mutable data, programmers have to keep track of identity
**** Often crucial to make copies in correct places
**** Example: returning a copy of a mutable list
** Comments in ML with (* *)

#+BEGIN_SRC sml
(* This is a comment *)
#+END_SRC

** Create a variable with val

#+BEGIN_SRC sml
val x = 34;
(* static environment: x : int *)
(* dynamic environment: x --> 34 *)

val y = 17;
(* static environment: x : int, y : int *)
(* dynamic environment: x --> 34, y --> 17 *)

(* for more declarations, see 3_our_first_program.sml *)
#+END_SRC

** Top down. You cannot use later bindings; only earlier
** if is an expression: if e1 then e2 else e3;
*** e1 must be bool; e2 and e3 must be of the same type
*** you cannot leave off the else
*** no "truthiness".  e1 must be bool.
** End lines with semicolon in REPL, but not needed in file
** - is only used for subtraction; ~ for negation
** Functions are the most important building block in the course
*** Like Java methods, have arguments and result
*** But no classes, =this=, =return=, etc
*** Example

#+begin_src sml
(* Note: correct only if y>=0 *)

fun pow (x : int, y : int) =
  if y=0
  then 1
  else x * pow(x,y-1)

fun cube(x : int) =
  pow(x, 3)

(* functions of one argument can be called without parens *)
val sixtyfour = cube 4
#+end_src

** Tuples have a fixed "number of pieces" that may have different types
*** Pairs (2-tuples)
**** Access pieces with #1 e and #2 e

#+begin_src
val my_pair = (2, true)
val two = #1 my_pair
val t = #2 my_pair

fun swap (pr : int*bool) =
  (#2 pr, #1 pr)

val swapped_pair = swap my_pair

fun div_mod (x : int, y : int) =
  (x div y, x mod y)
#+end_src

*** Tuples
**** (e1,e2,...,en)
**** ta * tb * ... * tn
**** #1 e, #2 e, #3 e, ...
** List have any "number of pieces" that all have the same type
*** The empty list is a value: []
*** In general, a list of values is a value: [v1,v2,...,vn]
*** Cons: e1::e2 where e2 is a list and 1 is a compatible value

If e1 evaluates to v and e2 evaluates to a list [v1,...,vn]
  then e1::e2 evaluates to [v,...,vn]
  e1::e2 (* pronounced "cons" *)

*** Standard Library functions for Lists
**** =null e= evaluates to true iff e evaluates to []
***** null : 'a list -> bool
**** If e evaluates to [v1,v2,...,vn] then =hd e= evaluates to v1
***** Raises exception if e evaluates to []
***** hd : 'a list -> 'a
**** If e evaluates to [v1,v2,...,vn] then =tl e= evaluates to [v2,...,vn]
***** Raises exception if e evaluates to []
***** Notice result is a list
***** tl : 'a list -> 'a list
*** Type checking lists
**** For any type t, the type t list describes lists of t
**** Empty list has type 'a list.  The 'a is a type variable

The empty list is compatible with a list of any type!

**** List functions usually work on type 'a list

- null : 'a list -> bool
- hd : 'a list -> 'a
- tl : 'a list -> 'a list

**** We will pronounce 'a as alpha
*** Examples of functions on lists

#+begin_src sml
(* take a list and return an int *)
fun sum_list (xs : int list) =
    if null xs
    then 0
    else hd x + sum_list(tl xs)

(* take an int and return an int list *)
fun countdown (x : int) = 
    if x=0
    then []
    else x :: countdown(x-1)

(* take two int lists and return an int list *)
fun append (xs : int list, ys : int list) =
    if null xs
    then ys
    else hd x :: append(tl xs, ys)

(* function over list of pairs *)
fun sum_pair_list (xs : (int * int) list) =
    if null xs
    then 0
    else #1 (hd xs) + #2 (hd xs) + sum_pair_list(tl xs)
#+end_src

** let expressions can introduce local variables
*** =let b1 b2 ... bn in e end=
*** Basic let example

#+begin_src sml
(* silly1 : int -> int *)
fun silly1 (z : int) =
    let
        val x = if z > 0 then z else 34
        val y = x + z + 9
    in
        if x > y then x * 2 else y * y
    end

(* evaluates to 7 *)
fun silly2 () =
    let
        val x = 1
    in
        (let val x = 2 in x+1 end) + (let val y = x+2 in y+1 end)
    end
#+end_src

*** let introduces *scope*
*** functions are just bindings, so let can introduce functions
**** nested functions are good style if they are:
***** unlikely to be useful elsewhere
***** likely to be misused if available elsewhere
***** likely to be changed or removed later
*** let expressions can prevent repeated computation

#+begin_src sml
(* the primary problem here is two recursive calls to bad_max *)
fun bad_max (xs : int list) =
    if null xs
    then 0  (* bad choice, but not what we're focused on *)
    else if null (tl xs)
    then hd xs
    else if hd xs > bad_max(tl xs)
    then hd xs
    else bad_max(tl xs)

(* let allows us to store the computation result *)
fun better_max (xs : int list) =
    if null xs
    then 0 (* still a bad choice *)
    else if null (tl xs)
    then hd xs
    else
        let val tl_ans = better_max(tl xs)
        in
            if hd xs > tl_ans
            then hd xs
            else tl_ans
        end
#+end_s
** Options can return NONE when a value is inappropriate
*** NONE or SOME e
*** NONE has type 'a option
*** SOME e has type t option if e has type t
*** access value with isSome and valOf
**** isSome : 'a option -> bool
**** valOf : 'a option -> 'a (exception if given NONE)
*** We saw in max where max [] shouldn't be 0
**** But what is max []?
***** an exception?
***** []
***** better answer: NONE

**** max with Options

#+begin_src sml
(* better_max :: int list -> int option *)
fun better_max (xs : int list) =
    if null xs
    then NONE
    else
        let val tl_ans = best_max(tl xs)
        in if isSome tl_ans andalso valOf tl_ans > hd xs
           then tl_ans
           else SOME (hd xs)
        end

(* even better; use an internal version without options *)
fun best_max (xs : int list) =
    if null xs
    then NONE
    else
        let fun max_nonempty (xs : int list) =
                if null (tl xs) (* we've already eliminated null xs *)
                then hd xs
                else let val tl_ans = max_nonempty(tl xs)
                     in
                         if hd xs > tl_ans
                         then hd xs
                         else tl_ans
                     end
        in
            SOME (max_nonempty xs)
        end
#+end_src

** Boolean Operations
*** orelse and andalso are like && and || in other langs
    
Note: for any programming language with if-else, orelse and
andalso are unnecessary (but convenient!)
 
*** not e1 is true if e1 is false; false if e1 is true
** Comparisons in ML

Comparison operators: = <> > < >= <=

Note: != is <>

You can compare two ints or two reals.  You can't compare an int
and a real.  You can convert an int to a real with =Real.fromInt=.
Real.fromInt 2 is 2.0.

You can use = and <> on any equality type.  However, reals are not
an equality type, so you cannot use = and <> with reals.

** Some ML Rules for Expressions
*** Variables

Syntax: sequence of letters, digits, _, not starting with a digit.

Type-checking: Look up type in current static environment or fail.

Evaluation: Look up value in current dynamic environment.
  Expressions in variable bindings are evaluated eagerly

*** Addition

Syntax: e1 + e2 where e1 and e2 are expressions.

Type-checking: if e1 and e2 have type int, then e1 + e2 have type int, or fail.

Evaluation: If e1 evaluates to v1 and e2 evaluates to v2,
  then e1 + e2 evaluates to the sum of v1 and v2.

*** Values

All values are expressions, but not all expressions are values.

Every value "evaluates to itself" in "zero steps".

Examples:
  34, 17, 52 have type int.
  true, false have type bool.
  () has type unit.

*** Conditional Expressions

Syntax: if e1 then e2 else e3, where if/then/else are keywords
  and e1, e2, e3 are sub-expressions.

Type-checking: e1 must be bool.  e2 and e3 can have any type t, but must have
  the same type t.  The type of the entire expression is t.

Evaluation: first evaluate e1 to a value v1.
  if v1 is true, then evaluate e2 and that is the whole expression's result.
  if v1 is false, then evaluate e3 and that is the whole expression's result.

*** Less-than

Syntax: e1 < e2

Type-checking: e1 and e2 must both be type t.  The whole expression is a bool.

Evaluation: first evaluate e1 and e2 to values v1 and v2, then compare v1 and v2

*** Functions

Syntax: fun x0 (x1 : t1, ... , xn : tn) = e

Type-checking: Adds binding x0 : (t1 * ... * tn) -> t if:
  Can type-check body e to have type t in the static environment
  containing:
    - "Enclosing" static environment (earlier bindings)
    - x1 : t1, ..., xn : tn (arguments with their types)
    - x0 : (t1 * ... * tn) -> t (for recursion)

Evaluation: A function is a value!
  - Adds x0 to dynamic environment so later expressions can call it
  - Function-call semantics will also allow recursion
Note: In SML there is no way to have functions that take variable # of args

*** Function Calls

Syntax: e0(e1, ..., en)
  Parentheses optional if there is exactly one argument

Type-checking:
  If:
    - e0 has some type (t1 * ... * tn) -> t
    - e1 has type t1, ..., en has type tn
  Then:
    - e0(e1,...,en) has type t

Evaluation:
  Under current dynamic environment, evaluate e0 to a function
    fun x0 (x1 : t1, ..., xn : tn) = e
    - Since call type-checked, result will be a function
  Under current dynamic environment, evaluate arguments to values v1, ..., vn
  Result is evaluation of e in an environment extended to map
    x1 to v1, ..., xn to vn
    - "An environment" is actually the environment where the function
      was defined, and includes x0 for recursion

*** Pairs (2-tuples)

Syntax: (e1,e2)

Type-checking: If e1 has type ta and e2 has type tb, then the pair has
  type ta * tb

Evaluation: Evaluate e1 to v1 and e2 to v2; result is (v1,v2)
  A pair of values is a value

*** let expressions

Syntax: let b1 b2 ... bn in e end
- Each bi is any binding and e is any expression

Type-checking: Type-check each bi and e in a static environment
  that includes the previous bindings.
  Type of whole let expression is the type of e.

Evaluation: Evaluate each bi and e in a dynamic environment
  that includes the previous bindings.
  Result of whole let-expression is result of evaluating e.

*** Boolean Operations

Two operations (three with not, but it's just a function)

Syntax: e1 andalso e2

Type-checking: e1 and e2 must have type bool

Evaluation: if result of e1 is false then false else result of e2

Syntax: e1 orelse e2

Type-checking: e1 and e2 must have type bool

Evaluation: if result of e1 is true then true else result of e2

=not= is just a function.  andalso and orelse do short-circuit evaluation,
so they aren't normal functions.

* Using the REPL
** You can type 'use filename.sml' to load a file
** Exit and restart session before using use again
** Errors
*** Syntax

What you wrote means nothing or not the construct you intended.

*** Type-checking

What you wrote does not type-check.

*** Evaluation

It runs but produces wrong answer, or an exception, or an infinite loop.
* More ML
** Compound Types in General

We know of multiple base types like int, bool, unit, char, and real.
We've already seen some compound types.  Tuples, lists, options.

*** "Each of" (Product) types

A value t contains values of each of t1 t2 ... tn
Example: A tuple of int * bool has an int and a bool.

*** "One of" (Sum) types

A value t contains values of one of t1 t2 ... tn
Example: An int option has either an int or NONE

*** "Self reference" (Recursive) types

A t value can refer to other t values.
Example: A list is either nil or an element of type t and a list of type t.
Note: List is an example of all three types.  It is recursive, an int list
contains an int /and/ another int list /or/ it contains an empty list.

** Records

Records are a product type.  Very similar to tuples, but using named fields.
Records are normally a better choice than tuples when there's a lot of 
fields, since tuples use position where records name their fields.
We don't have to declare a record type.  We can just define a record
with curly braces.  You get accessors for fields in the form #field-name,
like =#bar x= below.

#+begin_src sml
val x = {bar=(1+2, true andalso true), foo=3+4, baz=(false,9) }
(* val x = {bar=(3,true),baz=(false,9),foo=7} *)
(* x : {bar:int * bool, baz: bool * int, foo: int} *)

#bar x;
(* val it = (3,true) : int * bool *)
#+end_src

** Tuples as Syntactic Sugar

There's no such thing as tuples in ML.  They are just records.  Tuples
are just another way of writing records.  The field names are just 1, 2,
...  (e1,...,en) is another way of writing {1=e1,...,n=en} and
t1*...*tn is another way of writing {1:t1,...,n:tn}.  What we say is that
tuples are /syntactic sugar/ for records with fields named 1, 2, ... n.

** Datatype Bindings

Datatype bindings are great for declaring Sum types.  These are also called
"tagged unions", because the constructor used to create a type sticks around
in the data as a tag.

#+begin_src sml
datatype mytype = TwoInts of int * int
                | Str of string
                | Pizza
#+end_src

- Adds a new type mytype to the environment.
- Adds constructors to the envrionment: TwoInts, Str, and Pizza
- A constructor is a function that makes values of the new type
(or is a value of the new type, in the case of Pizza and other
constructors without arguments)
  * TwoInts : int * int -> mytype
  * Str : string -> mytype
  * Pizza : mytype
Values
- Any value of type mytype is made from one of the constructors
- The value contains:
  * A "tag" for "which constructor" (eg. TwoInts)
  * The corresponding data (eg. (7,9))
 
You access these values using pattern matching.

** Pattern Matching
*** Case Expressions with Datatypes

Case expressions are a multi-branch conditional to pick branch based on
variant.  It extracts data and introduce variable bindings local to that
branch.  All branches must have the same type.

#+begin_src sml
datatype mytype = TwoInt of int * int
                | Str of string
                | Pizza

(* mytype -> int *)
fun f (x : mytype) =
    case x of
        Pizza => 3
      | Str s => String.size s
      | TwoInts(i1,i2) => i1 + i2
#+end_src

*** Case Expressions with Lists and Options

Lists and Options are datatypes.  NONE and SOME are constructors.  
[] and :: are also constructors.  Both can be matched on.

#+begin_src sml
fun inc_or_zero intoption =
    case intoption of
        NONE => 0
      | SOME x => x + 1

fun sum_list xs =
    case xs of
        [] => 0
      | x::xs' => x + sum_list xs'

fun append (xs,ys) =
    case xs of
        [] => ys
      | x::xs' => x :: append(xs',ys)
#+end_src

*** Pattern Matching for Records and Tuples

- The pattern (x1,...,xn) matches the tuple value (v1,...,vn)
- The pattern {f1=x1, ..., fn=xn} matches the record value {f1=v1, ... ,fn=vn}

#+begin_src sml
(* this is bad style but works like our other examples with case *)
fun sum_triple triple = 
    case triple of
        (x, y, z) => x + y + z

fun full_name r =
    case r of
        {first=x, middle=y, last=z} => x ^ " " ^ y ^ " " ^ z
#+end_src

*** Val-Binding Patterns

A val-binding can use a pattern, not just a variable.  val p = e
In cases where we've used it before, we were just using a single variable
as the pattern to match, which matches everything.
It's usually poor style to put a constructor pattern in a val-binding,
since it only tests for the one variant and raises an exception otherwise.

#+begin_src sml
(* this is ok style, but we will improve upon it shortly *)
fun sum_triple triple =
    let val (x, y, z) = triple
    in
        x + y + z
    end

fun full_name r =
    let val {first=x, middle=y, last=z} = r
    in
        x ^ " " ^ y ^ " " ^ z
    end
#+end_src

*** Function-Argument Patterns

A function argument can also be a pattern and it matches against the
argument in a function call.  fun f p = e

#+begin_src sml
(* best style *)
fun sum_triple (x, y, z) =
    x + y + z

fun full_name {first=x, middle=y, last=z} =
    x ^ " " ^ y ^ " " ^ z
#+end_src

In ML, every function takes exactly one argument.  What we call multi-
argument functions are just functions taking one tuple argument,
implemented with a tuple pattern in the function binding.

*** Nested Patterns

We can nest patterns within other patterns.

#+begin_src sml
exception ListLengthMismatch

fun zip3 list_triple = 
    case list_triple of
        ([],[],[]) => []
      | (hd1::tl1,hd2::tl2,hd3::tl3) => (hd1,hd2,hd3)::zip3(tl1,tl2,tl3)
      | _ => raise ListLengthMismatch

fun unzip3 lst =
    case lst of
        [] => ([], [], [])
      | (a,b,c)::tl => let val (l1,l2,l3) = unzip3 tl
                       in
                           (a::l1,b::l2,c::l3)
                       end

fun nondecreasing xs = (* int list -> bool *)
    case xs of
        [] => true
      | _::[] => true
      | head::(neck::rest) => head <= neck
                              andalso nondecreasing (neck::rest)
#+end_src

*** Function Patterns

If the entire function body is a case expression, you can instead write
the function as a function pattern.

#+begin_src sml
datatype exp = Constant of int
             | Negate of exp
             | Add of exp * exp
             | Multiply of exp * exp

fun old_eval e =
    case e of
        Constant i => i
      | Negate e2  => ~ (old_eval e2)
      | Add(e1,e2) => (old_eval e1) + (old_eval e2)
      | Multiply(e1,e2) => (old_eval e1) * (old_eval e2)

fun eval (Constant i) = i
  | eval (Negate e2)  = ~ (eval e2)
  | eval (Add(e1,e2)) = (eval e1) + (eval e2)
  | eval (Multiply(e1,e2)) = (eval e1) * (eval e2)

fun append ([],ys) = ys
  | append (x:xs',ys) = x :: append(xs',ys)
#+end_src

** Useful Datatype Examples

#+begin_src sml
(* enumerations are a good use of datatypes *)
datatype suit = Club | Diamond | Heart | Spade
datatype rank = Jack | Queen | King | Ace | Num of int

(* also, you may have alternate ways to identify real world things *)
datatype id = StudentNum of int
            | Name of string * (string option) * string

(* also useful for expression trees *)
datatype exp = Constant of int
             | Negate   of exp
             | Add      of exp
             | Multiply of exp
(* and here's an expression *)
Add (Constant (10+9), Negate (Constant 4))

(* and here's a eval function for expressions *)
fun eval e =
    case e of
        Constant i      => i
      | Negate e2       => ~ (eval e2)
      | Add(e1,e2)      => (eval e1) + (eval e2)
      | Multiply(e1,e2) => (eval e1) * (eval e2)

(* we don't have to evaluate expressions, let's just count the number of Adds *)
fun number_of_adds e = 
    case e of
        Constant i      => 0
      | Negate e2       => number_of_adds e2
      | Add(e1,e2)      => 1 + number_of_adds e1 + number_of_adds e2
      | Multiple(e1,e2) => number_of_adds e1 + number_of_adds e2

(* A final example finds the largest constant *)
fun max_constant e =
    let fun max_of_two(e1,e2) =
            let val m1 = max_constant e1
                val m2 = max_constant e2
            in if m1 > m2 then m1 else m2 end
    in
    case e of
          Constant i      => i
        | Negate e2       => max_constant e2
        | Add(e1,e2)      => max_of_two(e1,e2)
        | Multiply(e1,e2) => max_of_two(e1,e2)
    end

(* A better max_constant uses Int.max *)
fun max_constant2 e = 
    case e of
        Constant i        => i
      | Negate e2         => max_constant e2
      | Add(e1,e2)        => Int.max(max_constant e1, max_constant e2)
      | Multiply(e1,e2)   => Int.max(max_constant e1, max_constant e2)
#+end_src

Add (Constant (10+9), Negate (Constant 4)) can be represented as a tree:

        Add
      /     \
  Constant Negate
      |      |
     19    Constant
             |
             4

** Type Synonyms

A /type synonym/ is a new kind of binding: =type aname = t=. 
It just creates another name for a type.  The type and new name are
interchangeable in every way.

#+begin_src sml
datatype suit = Club | Diamond | Heart | Spade

datatype rank = Jack | Queen | King | Ace | Num of int

type card = suit * rank

(* and if our students have an ID and a name, how about a record type *)
type name_record = { student_num : int option,
                     first       : string,
                     middle      : string option,
                     last        : string }
#+end_src

** Polymorphic Datatype Bindings

You can put a type parameter between the word =datatype= and the type.

#+begin_src sml
datatype 'a option = NONE | SOME of 'a

datatype 'a mylist = Empty | Cons of 'a * 'a mylist

datatype ('a,'b) tree =
    Node of 'a * ('a,'b) tree * ('a,'b) tree
  | Leaf of 'b
#+end_src

Binding then introduces a type constructor, not a type.  option is not a
type, but int option is.  Same with list; list is not a type, but 
int list is a type.

Note: You can pronounce 'a as alpha.

** Equality Types

When you see ''a in a type, it means "equality types", only values that
you can use = to compare.  = works on a lot of types: int, string, tuples
containing equality types, and more.  = doesn't work on functions or reals.

#+begin_src sml
(* ''a * ''a -> string *)
fun same_thing(x, y) =
    if x=y then "yes" else "no"
#+end_src

* Something
