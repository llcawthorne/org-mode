Notes on Spacemacs: Clojure Development Made Simple
https://practicalli.github.io/spacemacs/

* Spacemacs Basics
** Access Help

- SPC h SPC ;; bring up help for spacemacs
- SPC h d f ;; describes a function
- SPC h d k ;; describes a keybinding

** Vim Basics
*** Modes and their colors

- orange - normal - for manipulating and nvaigating existing text
- green - insert - for writing new text
- blue - emacs - for using emacs keybindings
- gray - visual - for selecting blocks of text
- purple - motion - for moving around in a file
- pink - lisp - structural editing for Clojure & Lisp style languages
- red - iedit - edit multiple regions (multiple cursor mode)
- gold - evilified - not sure what this mode is for

*** C-z activates Holy Mode; press it again to get back to normal mode
*** Basics of speaking vim

Verbs: c (change), d (delete), s (surround), v (visual select), y (yank/copy)
Modifiers: a (around), i (inside), SPC j (jump to next char),
           t (til..just before a char), f (find..the next char),
           / (search..find a string/regex)
Objects: w (word), s (sentence), p (paragraph), b (block/parens), 
         t (tag - html/xml)

Basic examples:
- ciw - change inside word (inside doesn't get space around word)
- cab - change all text in parens (around includes changing the parens)
- vis - highlight inside a sentence (inside leaves off space after period)
- dt) - delete until ) (leaves the closing ) )
- ci" - change inside double quotes (inside leaves the quotes)

*** The power of g

You can visual select with v, then hit g to bring up a menu of things to do.
Also handy, is g c c will comment out a single line.  g c 5 j will comment out
the next five lines.

*** SPC s e to search for word under cursor and highlight all matches to edit

Just * e would  work also.  multi-cursor is a pretty cool feature.  Figure
out how to use it more. It's not that much different than :%s/old/new/g
for changing all occurrences though.

*** fd exits insert without you needing to hit escape with your pinky
*** JUMPING commands: SPC j i and SPC j l

SPC j i will let you jump to all the defun's in a Clojure file or all the
headings in an org-mode file.  SPC j l will annotate lines with characters
and let you type the characters to jump to that specific line.  There's other
jump option in SPC j, but those are two of the most handy.

*** SPC / is useful to search within a project

NOTE: searching for \bor\b will match "or" but not "word", because of 
specifying the \b for word boundary.

** Useful Developer Shortcuts

- g c c - comment line
- SPC ; ; - comment current line
- SPC ; p - comment current paragraph / code structure
- v (select) g c - comment region
- g c 9 j - comment 9 lines from current, downwards

- v s ] - surround with [] without spaces
- c s ( [ - change surrounding () to []
- c i ( - change in ()
- c a ( - change around () ; changes the parens too
- % - jump forwards to next paren; hit again to jump to opening paren

[number]G - go to line number (:number works too)
g D - open definition in another window
= - code-aware indenting operator.  Nice with the ap (a paragraph) object
zc and zo - to close and open code folds

{ and } - are useful to move by paragraph
{ d } - deletes a paragraph
> and < - are indent and dedent operators (useful with paragraph motions)

** eshell: SPC '

SPC SPC eshell loads eshell in a buffer, but it is more handy to bring it's
up from a popup window with SPC '

** transient states: try SPC b .
** killing multiple buffers without transient state

Hit SPC b b.  Navigate to buffer names you want to delete by moving the cursor
with C-j and C-k.  Mark a buffer for deletion using C-SPC.  Then once all 
buffers are marked, hit M-D to delete marked buffers. 

* 
